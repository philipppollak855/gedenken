import os
from pathlib import Path
import dj_database_url

# TEST-ZEILE: Diese Nachricht MUSS im Render Build-Log erscheinen.
print("---> WIRD DIE NEUESTE SETTINGS.PY AUSGEFÜHRT? JA!")

"""
Django settings for the 'core' project.

Generated by 'django-admin startproject' using Django.
For more information on this file, see
https://docs.djangoproject.com/en/stable/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/stable/ref/settings/
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# Dies sollte korrekt sein, wenn deine settings.py in backend/core/ liegt.
BASE_DIR = Path(__file__).resolve().parent.parent

# --- Wichtige Sicherheitseinstellungen ---

# SECRET_KEY wird aus den Umgebungsvariablen von Render geladen.
SECRET_KEY = os.environ.get('SECRET_KEY')

# DEBUG-Modus wird basierend auf der Umgebungsvariable gesteuert.
# Auf Render ist DJANGO_ENV auf 'production' gesetzt, also ist DEBUG=False.
DEBUG = os.environ.get('DJANGO_ENV') == 'development'

# Erlaubte Hosts für den Betrieb auf Render.
# '.onrender.com' erlaubt deinem Service, unter seiner Render-URL erreichbar zu sein.
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '.onrender.com',
]


# --- Applikationsdefinition ---

INSTALLED_APPS = [
    # KORRIGIERT: Dies ist die neue, korrekte Konfiguration für das Unfold Admin Theme.
    # Die alten 'unfold.contrib.*' Einträge wurden entfernt, um den Build-Fehler zu beheben.
    'unfold',
    'unfold.contrib.import_export', # Für die Integration mit django-import-export

    # Standard Django Apps
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Drittanbieter-Apps aus deiner requirements.txt
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'import_export',

    # Deine eigenen Apps (füge hier die Namen deiner Apps hinzu)
    # z.B. 'api', 'users', 'gedenken_app'
]


# --- Middleware-Konfiguration ---

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # WhiteNoise Middleware für statische Dateien (direkt nach SecurityMiddleware)
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # CORS Middleware (vor CommonMiddleware)
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# --- Datenbankkonfiguration ---

# Die Datenbank wird über die DATABASE_URL Umgebungsvariable von Render konfiguriert.
DATABASES = {
    'default': dj_database_url.config(
        # Setzt einen Standardwert für die lokale Entwicklung, falls DATABASE_URL nicht gesetzt ist.
        default=f'sqlite:///{BASE_DIR / "db.sqlite3"}',
        conn_max_age=600,
        ssl_require=True # Wichtig für sichere Verbindungen zu Render-Datenbanken
    )
}


# --- Passwort-Validierung ---

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator'},
    {'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator'},
    {'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator'},
    {'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator'},
]


# --- Internationalisierung ---

LANGUAGE_CODE = 'de-de'
TIME_ZONE = 'Europe/Berlin'
USE_I18N = True
USE_TZ = True


# --- Statische Dateien (CSS, JavaScript, Bilder) ---

STATIC_URL = '/static/'
# Verzeichnis, in das `collectstatic` alle statischen Dateien für die Produktion sammelt.
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
# Speicher-Engine für WhiteNoise, um statische Dateien effizient auszuliefern.
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# --- Media-Dateien (Benutzer-Uploads) ---
# Konfiguration für den persistenten Speicher auf Render (siehe render.yaml)
MEDIA_URL = '/media/'
MEDIA_ROOT = '/var/media' # Der Mount-Pfad, der in render.yaml definiert wurde


# --- Standard-Primärschlüssel-Feld ---

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# --- CORS (Cross-Origin Resource Sharing) Konfiguration ---

# Liest die erlaubten URLs aus der Umgebungsvariable, die du in Render gesetzt hast.
# Der Standardwert ist für die lokale Entwicklung.
# In Render sollte die Variable CORS_ALLOWED_ORIGINS auf 'https://gedenken.netlify.app' gesetzt sein.
CORS_ALLOWED_ORIGINS = os.environ.get(
    'CORS_ALLOWED_ORIGINS',
    'http://localhost:3000,http://127.0.0.1:3000'
).split(',')

# Wenn du Cookies oder Authentifizierungs-Header über verschiedene Domains hinweg senden musst:
# CORS_ALLOW_CREDENTIALS = True
